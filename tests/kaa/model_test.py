import unittest
import datetime
from minimock import Mock
from kaa import model

class ModelTestCase(unittest.TestCase):
    def test_identifier_autogenerated(self):
        model.uuid = Mock('model.uuid')
        model.uuid.uuid4.mock_returns = "some-random-uuid"
        identifier = model.Identifier()
        assert repr(identifier) == 'some-random-uuid'
        assert str(identifier) == 'some-random-uuid'


    def test_identifier_by_param(self):
        identifier = model.Identifier('my-uuid')
        assert repr(identifier) == 'my-uuid'
        assert str(identifier) == 'my-uuid'

    def test_base_is_abstract(self):
        self.assertRaises(TypeError, model.Entity)

    def test_persister_methods(self):
        entity = Mock('model.Entity')
        model.Manager.storage = Mock('model.Manager.storage')
        model.Manager.save(entity)
        assert model.Manager.storage.set.called
        identifier = model.Identifier('some-uuid')
        model.Manager.get(identifier)
        assert model.Manager.storage.get.called

    def test_new_customer(self):
        customer = model.Customer()
        assert type(customer.created_at) == datetime.datetime


    def test_identifier(self):
        customer = model.Customer()
        print customer.uuid
